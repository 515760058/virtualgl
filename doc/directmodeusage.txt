* Using VirtualGL with the VGL Image Transport
{anchor: VGL_Image_Transport_Usage}

*** Advantages of the VGL Image Transport
#OPT: noList! plain!

	* Seamless windows; every application window appears as a separate window on
		the user's desktop
	* Supports stereographic and overlay rendering
	* Built-in encryption
	* Multi-threaded image compression
	* Consumes fewer server resources, since the 2D (X11) rendering occurs on the
		client

*** Disadvantages of the VGL Image Transport
#OPT: noList! plain!

	* The VGL Image Transport is designed to be used with remote X servers, thus
		it relies on the chatty remote X11 protocol to send the 2D elements of the
		application's GUI to the user's desktop.  As a result, the VGL Image
		Transport is not recommended for use on high-latency networks
	* No collaboration features
	* Requires purchasing Exceed for use with Windows clients
	* The client is not stateless.  As with any remote X11 app, if the network
		connection drops, then the application will exit

** VGL Image Transport with X11 Forwarding
{anchor: X11_Forwarding}

This mode is recommended for use on secure local-area networks.  The X11
traffic is encrypted, but the VirtualGL image stream is left unencrypted to
maximize performance.

*** Procedure for Linux/Solaris/Mac Clients
#OPT: noList! plain!

	#. Start the X server if it isn't started already (__Mac users:__ start the
		Mac X11 application.)

	#. Open a new terminal window (__Mac users:__ in the X11 application, start a
		new xterm [Command-N] if one isn't already started.)

	#. In the same terminal/xterm window, open a Secure Shell (SSh) session into
		the VirtualGL server:

		#Verb: <<---
		/opt/VirtualGL/bin/vglconnect {user}@{server}
		---

		Replace ''{user}'' with your user account name on the VirtualGL server and
		''{server}'' with the hostname or IP address of that server.

	#. In the SSh session, start a 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

*** Procedure for Windows Clients
#OPT: noList! plain!

	#. Start Exceed if it isn't already started.  Hover the mouse pointer over
		the Exceed taskbar icon and make a note of the display number on which
		Exceed is listening (__Example:__ "Exceed 0.0 Multiwindow Mode".)

	#. Open a new Command Prompt.

	#. In the same Command Prompt window, set the ''DISPLAY'' environment
		variable to match the display on which Exceed is listening.  Example:

		#Verb: <<---
		set DISPLAY=:0.0
		---

		!!! If you only ever plan to use one Exceed session at a time, then you
		can set the ''DISPLAY'' environment variable in your global user
		environment (__Control Panel-->System-->Advanced-->Environment Variables__.)

	#. Open a Secure Shell (SSh) session into the VirtualGL server:

		#Verb: <<---
		cd /d "c:\program files\virtualgl-{version}"
		vglconnect {user}@{server}
		---

		Replace ''{user}'' with your user account name on the VirtualGL server and
		''{server}'' with the hostname or IP address of that server.

	#. In the SSh session, start a 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

** VGL Image Transport with a Direct X11 Connection
{anchor: Direct_X11_Connection}

As with the [[#X11_Forwarding][previous mode]], this mode performs optimally on
local-area networks.  However, it is less secure, since both the X11 traffic
and the VGL image stream are unencrypted.  This mode is primarily useful in
grid environments where you may not know ahead of time which server will
execute a VirtualGL job.  It is assumed that the "submit host" (the machine
into which you connect with SSh) and the "execute hosts" (the machines that
will run VirtualGL jobs) share the same home directories and reside in the same
domain.

	!!! Some newer Linux and Solaris distributions ship with default settings
	that do not allow TCP connections into the X server.  Such systems cannot be
	used as clients with this procedure unless they are reconfigured to allow
	X11 TCP connections.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for
[[#X11_Forwarding][X11 forwarding]], except that you should pass a ''-x''
argument to ''vglconnect'' when connecting to the server:

	#Verb: <<---
	/opt/VirtualGL/bin/vglconnect -x {user}@{server}
	---

** VGL Image Transport with SSL Encryption

This mode encrypts the VGL image stream and, when used in conjunction with
[[#X11_Forwarding][X11 forwarding]], provides a completely secure solution.
However, enabling SSL encryption can reduce VirtualGL's performance by as much
as 20% on high-speed networks such as Ethernet.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for 
[[#X11_Forwarding][X11 forwarding]], except that you should pass an argument
of ''+s'' to ''vglrun'' when starting a 3D application using VirtualGL.  You
can also set the environment variable ''VGL_SSL'' to ''1'' on the VirtualGL
server prior to invoking ''vglrun''.  (see {ref prefix="Chapter ": Advanced_Configuration}
for more details.)

** VGL Image Transport with X11 Forwarding and SSh Tunneling

This mode is useful when either the VirtualGL server or the client machine
are behind restrictive firewalls and only SSh connections are allowed through.
Both the VGL image stream and the X11 traffic are tunneled through the SSh
connection, and thus this mode provides a completely secure solution.  However,
using SSh tunneling can reduce VirtualGL's performance by anywhere from 20-40%
on high-speed networks such as Ethernet.

*** Procedure
#OPT: noList! plain!

The procedure for this mode is identical to the procedure for
[[#X11_Forwarding][X11 forwarding]], except that you should pass a ''-s''
argument to ''vglconnect'' when connecting to the server:

	#Verb: <<---
	/opt/VirtualGL/bin/vglconnect -s {user}@{server}
	---

''vglconnect'' will make two SSh connections into the server, the first to find
an open port on the server and the second to create the secure image tunnels
and open the secure shell.  If you are not using an SSh agent to create
password-less logins, then this mode will require you to enter your password
twice.

''vglconnect -s'' can be used to create multi-layered SSh tunnels.  For
instance, if the VirtualGL server is not directly accessible from the Internet,
you can use ''vglconnect -s'' to connect to a gateway server, then use
''vglconnect -s'' again on the gateway server to connect to the VirtualGL
server.  Both the X11 and the VGL image traffic will be forwarded from the
VirtualGL server through the gateway and to the client.

#IMG: sshtunnel.png
