* Using VirtualGL in Raw Mode with TurboVNC
{anchor: TurboVNC_Usage}

Referring to {ref prefix="Chapter ": Overview}, Raw Mode is a mode in
which VirtualGL bypasses its internal image compressor and instead sends the
rendered 3D images to an X server as uncompressed bitmaps.  Raw Mode is
designed to be used with an "X Proxy", which is a virtual X server that
intercepts X-Windows commands from an application, renders them into images,
compresses the images, and sends them over the network to a client.

Thus, in Raw Mode, VirtualGL relies on the X proxy to compress the rendered
3D images, and since VirtualGL is sending those images to the X proxy at a
very fast rate, the proxy must be able to compress the images very quickly in
order to keep up.  But, unfortunately, most X proxies can't.  They simply
aren't designed for the types of full-screen video workloads that VirtualGL
generates.  Therefore, the VirtualGL Project provides an optimized X proxy
known as TurboVNC, which is based on the
[[http://www.realvnc.com/][Virtual Network Computing (VNC)]] standard (more
specifically, on the [[http://www.tightvnc.com][TightVNC]] variant thereof.)

On the surface, TurboVNC behaves very similarly to its parent project, but 
TurboVNC has been tuned to provide interactive performance for the types of
full-screen video workloads that VirtualGL produces.  On these types of image
workloads, TurboVNC performs as much as an order of magnitude faster than
TightVNC, uses more than an order of magnitude less CPU time to compress each
frame, and it produces comparable compression ratios.  Part of this speedup
comes from the use of TurboJPEG, the same high-speed vector-optimized JPEG
codec used by VirtualGL.  Another large part of the speedup comes from
bypassing the color compression features of TightVNC.  TightVNC performs very
CPU-intensive analysis on each image tile to determine whether the tile will
compress better using color compression or JPEG.  But for the types of images
that a 3D application generates, it is almost never the case that color
compression compresses better than JPEG, so TurboVNC bypasses this analysis to
improve performance.  TurboVNC also has the ability to hide network latency by
decompressing and drawing a frame on the client while the next frame is being
fetched from the server, thus improving performance dramatically on high-latency
connections.  TurboVNC additionally provides client-side double buffering, full
support for Solaris, and other tweaks.

There are several reasons why one might prefer to use Raw Mode + TurboVNC over
Direct Mode (and several reasons why one might not.)

*** Advantages of Raw Mode + TurboVNC
#OPT: noList! plain!

	* TurboVNC eliminates the need to send X11 traffic over the network, thus
		it performs very well on low-bandwidth, high-latency connections (such as
		broadband or long-haul T1 lines.)  The application GUI will load and render
		much faster (perhaps even orders of magnitude faster) with TurboVNC
		than with Direct Mode on such connections.

	* TurboVNC provides rudimentary collaboration capabilities.  Multiple clients
		can simultaneously view the same server session and pass around control of
		the keyboard and mouse.

	* The TurboVNC client is stateless.  If the network hiccups or the client is
		otherwise disconnected, the session remains running on the server and can
		be rejoined from any machine on the network.

	* No X server is required on the client machine.  This reduces the deployment
		cost and complexity for Windows clients.

	* TurboVNC is generally easier to set up and use.

*** Advantages of Direct Mode
#OPT: noList! plain!

	* Direct Mode performs significantly faster (generally about 25-30% faster)
		than TurboVNC on local-area networks.

	* Direct Mode provides seamless windows, whereby each application window
		appears as a separate window on the user's desktop.  TurboVNC, on the other
		hand, displays the entire virtual desktop in a single window, which does
		not create a seamless experience.

	* Direct Mode consumes fewer server CPU resources.  TurboVNC will generally
		require about 20% more server CPU cycles to maintain the same frame rate
		as Direct Mode, both because it has to compress more pixels in each frame
		(an entire desktop rather than a single window) and because it has to
		perform 2D (X11) rendering as well as 3D rendering.  In Direct Mode, the
		2D (X11) rendering is offloaded to the client machine.

	* Direct Mode supports stereographic rendering and transparent overlays.

** Using Raw Mode When TurboVNC and VirtualGL Are Running on the Same Machine

#IMG: rawmodetoxproxy.png
#OPT fmt=latex: w=4cm

	#. Open a new Command Prompt/terminal window on your client machine.

	#. In the new Command Prompt/terminal window, open a Secure Shell (SSh)
		session into the VirtualGL/TurboVNC server machine by typing:

		#Verb: <<---
		ssh {user}@{server}
		---

		Replace ''{user}'' with your user account name on the VirtualGL server and
		''{server}'' with the hostname or IP address of that server.

		!!! If using PuTTY, replace ''ssh'' with ''putty'' in the above example.

	#. In the SSh session, start a TurboVNC server session:

		#Verb: <<---
		/opt/TurboVNC/bin/vncserver
		---

	#. Make a note of the X display number that the TurboVNC server process
		prints out, for instance:
		{nl}{nl}
		''New 'X' desktop is my_server:1''
		{nl}{nl}
		If this is the first time that a TurboVNC server session has ever been run
		under this user account, TurboVNC will prompt for a VNC session password.

	#. The SSh session can now be exited, if desired.

	#. On the client machine, start the TurboVNC Viewer.

		Linux and Solaris clients :: {:}
		Open a terminal and type
		#Verb: <<---
		/opt/TurboVNC/bin/vncviewer
		---

		Windows clients :: {:}
		Select __TurboVNC Viewer__ in the __TurboVNC__ Start Menu group.

	#. A small dialog box will appear.
		{nl}{nl}
		|| Windows TurboVNC viewer || Linux/Solaris TurboVNC viewer ||
		| {img:turbovnc1.png} | {img:turbovnc2.png} |
		{nl}
		Enter the X display name (hostname/IP address and display number) of the
		TurboVNC server in the "VNC Server" field, then click "Connect" (Windows)
		or press Enter (Linux/Solaris.)

	#. Another dialog box appears, prompting for the VNC session password.
		{nl}{nl}
		|| Windows TurboVNC viewer || Linux/Solaris TurboVNC viewer ||
		| {img:turbovnc3.png} | {img:turbovnc4.png} |
		{nl}
		Enter the TurboVNC session password and click "OK" (Windows) or press
		Enter (Linux/Solaris.)
		{nl}{nl}
		A TurboVNC desktop window should appear on your client machine.  This
		window contains a virtual X server with which you can interact to launch
		X-Windows applications on the TurboVNC server machine.

	#. Open a new terminal inside the TurboVNC desktop.

	#. In the terminal, start the 3D application using VirtualGL:

		#Verb: <<---
		/opt/VirtualGL/bin/vglrun [vglrun options] {application_executable_or_script} {arguments}
		---

	Consult {ref prefix="Chapter ": Advanced_Configuration} for more
	information on ''vglrun'' command line options.

** Using Raw Mode When TurboVNC and VirtualGL Are Running on Different Machines

#IMG: rawmodeoverservernetwork.png
#OPT fmt=latex: w=4cm

If TurboVNC and VirtualGL are running on different servers, then it is
desirable to use Raw Mode to send images from the VirtualGL server to the
TurboVNC server.  Otherwise, the images would have to be compressed by the
VirtualGL server, decompressed by the VirtualGL client, then recompressed by
the TurboVNC server, which is a waste of CPU resources.  However, sending
images uncompressed over a network requires a fast network (generally, Gigabit
Ethernet or faster.)  So there needs to be a fast link between the VirtualGL
server and the TurboVNC server for this procedure to perform well.

The procedure for using Raw Mode to transmit images from a VirtualGL server
to a TurboVNC server is essentially the same as the procedure for using Direct
Mode with a [[directmodeusage.txt#Direct_X11_Connection][Direct X11 Connection]]
-- with the following notable differences:

	#. The "client" in this case is really the TurboVNC server machine.

	#. The "X server" is really the TurboVNC server session.

	#. It is not necessary to start the VirtualGL client.

	#. Once connected to the VirtualGL server via. SSh, it is necessary to either
		set the environment variable ''VGL_COMPRESS'' to ''0'' or pass an argument
		of ''-c 0'' to ''vglrun'' when launching VirtualGL.  Otherwise, VirtualGL
		will detect that the connection to the X server is remote, and it will
		automatically try to enable Direct Mode.  Setting ''VGL_COMPRESS'' to ''0''
		forces the use of Raw Mode, regardless of whether the X server is local or
		remote.

** Disconnecting and Killing the TurboVNC Session

Closing the TurboVNC viewer disconnects from the TurboVNC server session, but
the TurboVNC server session (and any applications that you may have started in
it) is still running on the server machine, and you can reconnect to it at any
time.

To kill a TurboVNC server session:

	#. Log in to the TurboVNC server using SSh.

	#. Type the following command:

		#Verb: <<---
		/opt/TurboVNC/bin/vncserver -kill :{n}
		---

	Replace ''{n}'' with the X display number of the TurboVNC server session you
	wish to kill.

To list the X display numbers and process ID's of all TurboVNC server sessions
that are currently running under your user account on this machine, run

	#Verb: <<---
	/opt/TurboVNC/bin/vncserver -list
	---

** Using TurboVNC in a Web Browser

When a TurboVNC server session is created, it automatically launches a
miniature web server that serves up a Java TurboVNC viewer applet.  This Java
TurboVNC viewer can be used to connect to the TurboVNC server from a machine
that does not have a native TurboVNC viewer installed (or a machine for which
no native TurboVNC viewer is available.)  The Java viewer is significantly
slower than the native viewer on high-speed networks, but on low-speed networks
the Java viewer and native viewers have comparable performance.  The Java
viewer does not currently support double buffering.

To use the Java TurboVNC viewer, point your web browser to:

''http://turbovnc_server:{5800+n}''

where ''{turbovnc_server}'' is the hostname or IP address of the TurboVNC
server machine, and ''n'' is the X display number of the TurboVNC server
session to which you want to connect.

__Example:__
If the TurboVNC server is running on X display ''my_server:1'', then point
your web browser to:

''http://my_server:5801''

** Optimizing TurboVNC's Performance for Different Network Types

The level of image compression in TurboVNC can be adjusted to balance the
(sometimes conflicting) goals of high image quality and high performance.
The more TurboVNC compresses an image, the more grainy the resulting
image becomes.  But these lower quality levels also require less network
bandwidth and can thus improve the overall performance of TurboVNC on slower
networks.

There are three options that control the level of image compression in
TurboVNC:

	Image compression type :: {:}
		Either "JPEG" or "None (RGB)".  "None (RGB)" turns off image compression
		altogether, which is useful when connecting to a TurboVNC server running
		on the same machine as the viewer or to a TurboVNC server located across a
		gigabit or faster network.  Disabling image compression greatly reduces the
		CPU usage on the server and client, at the expense of greatly increasing
		the network usage.

	JPEG image quality :: {:}
		Lower quality levels produce grainier JPEG images with more noticeable
		compression artifacts, but lower quality levels also use less network
		bandwidth and CPU power.  Refer to {ref prefix="Section ": VGL_QUAL} for
		more details.

	JPEG chrominance subsampling :: {:}
		After converting the image from RGB to YUV, chrominance subsampling
		discards some of the U and V (chrominance) components to save space.  1x
		subsampling retains the chrominance components for all pixels, 2x
		subsampling retains the chrominance components for every other pixel, 4x
		subsampling retains the chrominance components for every fourth pixel, and
		grayscale throws out all of the chrominance components.  Refer to
		{ref prefix="Section ": VGL_SUBSAMP} for more details.

In the Windows TurboVNC Viewer, these parameters can be adjusted by accessing
the Options dialog box (click the "Options" button in the "TurboVNC Connection"
dialog box or, after connecting to the server, click on the Connection Options
button in the toolbar.)  In the Unix TurboVNC viewer, press F8 after connecting
to bring up the options menu.  In the Java viewer, click on the Options button
at the top of the browser window.

The TurboVNC Viewer provides three "connection profiles", corresponding
to three of the most useful levels of JPEG image compression:

|| Connection profile || JPEG image quality || JPEG chrominance subsampling || Notes ||
| "Low Quality" | 30 | 4x | \
	This is generally about the lowest usable JPEG quality.  It produces very \
	noticeable image compression artifacts but will allow TurboVNC to perform \
	optimally on broadband connections.  If image quality is more critical than \
	performance, then use one of the other connection profiles or take \
	advantage of the "Lossless Refresh" feature. |
| "Medium Quality" | 80 | 2x | \
	This profile produces some minor, but generally not very noticeable, image \
	compression artifacts.  All else being equal, this profile uses \
	approximately twice the network bandwidth of the "Low Quality" profile and \
	half the bandwidth of the "High Quality" profile, making it appropriate for \
	medium-speed networks such as 10 Megabit ethernet. |
| "High Quality" | 95 | 1x | \
	This profile should be perceptually lossless (that is, it should produce no \
	noticeable image compression artifacts) for most applications.  It requires \
	a great deal of network bandwidth, however, and is generally not recommended \
	except on 50 Megabit/second and faster networks.  |

In the Windows TurboVNC Viewer, there are three buttons in the "TurboVNC
Connection" dialog box that allow you to easily select the connection profile.
In the Java viewer, the same thing is accomplished by clicking the "Options"
button at the top of the browser window.  With the Linux/Solaris TurboVNC
Viewer, the "High Quality" profile is the default, and you can use the
''-lowqual'' and ''-medqual'' command line options to ''vncviewer'' to switch
to the "Low Quality" or "Medium Quality" profiles.  You can also press the F8
key after connecting to pop up a menu from which you can select a different
connection profile.

*** Lossless Refresh
#OPT: noList! plain!

TurboVNC can optionally encode images as RGB, which is fully lossless and
uncompressed, but this mode does not perform well except on extremely fast
networks.  Another option for quality-critical applications is the "Lossless
Refresh" feature.  Lossless Refresh causes the server to send a
mathematically lossless (Zlib-compressed RGB) copy of the current screen to the
viewer.  So, for instance, a user can rotate/pan/zoom an object in their
application using a very lossy quality setting, then when that user is ready to
interpret or analyze the object closely, they can request a lossless refresh
of the screen.

To perform a lossless refresh, press CTRL-ALT-SHIFT-L in the Windows TurboVNC
Viewer (or click on the Lossless Refresh toolbar icon.)  In the Unix/Linux
TurboVNC Viewer, select "Lossless Refresh" from the F8 popup menu.  In the
Java TurboVNC Viewer, click the "Lossless Refresh" button at the top of the
browser window.

** Securing a TurboVNC Connection

Normally, the connection between the TurboVNC server and the TurboVNC viewer is
completely unencrypted, but securing that connection can be easily
accomplished by using the port forwarding feature of Secure Shell (SSh.)  After
you have started a TurboVNC server session on the server machine, open a new
SSh connection into the server machine using the following command line:

	#Verb: <<---
	ssh -L {5900+n}:localhost:{5900+n} {user}@{server}
	---

	!!! If using PuTTY, replace ''ssh'' with ''putty'' in the above example.

Replace ''{user}'' with your user account name on the TurboVNC server and
''{server}'' with the hostname or IP address of that server.  Replace
''n'' with the X display number of the TurboVNC server session to which you
want to connect.

For instance, if you wish to connect to display '':1'' on server ''my_server''
using user account ''my_user'', you would type

	#Verb: <<---
	ssh -L 5901:localhost:5901 my_user@my_server
	---

After the SSh connection has been established, you can then launch the
TurboVNC viewer and point it to ''localhost:{n}'' (''localhost:1'' in the
above example.)

*** Performance Notes
#OPT: noList! plain!

For LAN connections and other high-speed networks, tunneling the TurboVNC
connection over SSh will reduce performance by as much as 20% (50% if using
PuTTY.)  But for wide-area networks, broadband, etc., there is no performance
penalty for using SSh tunneling with TurboVNC.

** Further Reading

For more detailed instructions on the usage of TurboVNC:

	Linux and Solaris :: Refer to the TurboVNC man pages:
	#Verb: <<---
	man -M /opt/TurboVNC/man {vncserver | Xvnc | vncviewer | vncconnect | vncpasswd}
	---

	Windows :: Use the embedded help feature (the question mark button in the
	upper right of the TurboVNC Viewer window.)

The TightVNC documentation:

http://www.tightvnc.com/docs.html

might also be helpful, since TurboVNC is based on TightVNC and shares many of
its features.
