How to build VirtualGL in 9043 easy steps
=========================================


*******************************************************************************
**     A note about OpenSSL support
*******************************************************************************

   If built with OpenSSL support, VirtualGL can use OpenSSL to encrypt the
   traffic it sends via the VGL Image Transport.  This is only a marginally
   useful feature, however, since VirtualGL can also tunnel the VGL Image
   Transport through SSh.  Thus, since the embedded OpenSSL feature is
   difficult to maintain, it is not enabled by default in this release of
   VirtualGL.

   However, you can easily include OpenSSL support in your custom build of
   VirtualGL by specifying USESSL=yes as an argument to 'make' or by adding
   USESSL=yes to a file named 'config' in the VirtualGL build directory
   (create the file if it doesn't exist.)


*******************************************************************************
**     Prerequisites - Linux
*******************************************************************************

-- OpenSSL headers and link libraries (optional)

   VirtualGL can be built using the shared OpenSSL libraries provided with
   your Linux distribution, but this produces a version of VirtualGL that may
   not be compatible with other Linux distributions.  In order to build a fully
   cross-compatible version of VirtualGL, you must link VirtualGL against
   static versions of the OpenSSL libraries.  To do this:

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.linux64" if you are
     building a 64-bit version of VirtualGL or "openssl.linux" if you are
     building a 32-bit version of VirtualGL.
   * cd to the OpenSSL source directory and issue one of the following
     commands to configure the OpenSSL build:

     64-bit:
     ./Configure linux-x86_64 shared

     32-bit:
     ./Configure -m32 linux-generic32 shared

   * Build OpenSSL:

     make

-- GCC and G++

-- X11 dev. kit

   On most Linux variants, this can be found in the "XFree86-devel" or 
   "xorg-x11-devel" package.  On Ubuntu, it is in the "libx11-dev" package.

-- GNU Make v3.7 or later

-- binutils 2.12.90 or later.  This shouldn't be an issue unless you are
   (still) running RedHat 7.x or Enterprise Linux 2.1, in which case you can
   download an updated binutils RPM from:
   http://mirror.atrpms.net/ccrma/mirror/7.2/

-- Open mediaLib Lite

   The Open mediaLib Lite source tarball should have been supplied to you along
   with the VirtualGL source tarball.  Untar the Open mediaLib Lite source
   tarball into the directory one level up from the VirtualGL build directory,
   and refer to openmliblite/ReadMe.txt for instructions on how to build
   Open mediaLib Lite.


*******************************************************************************
**     Prerequisites - x86-64 Linux
*******************************************************************************

Building a redistributable VirtualGL package for x86-64 requires building both
32-bit and 64-bit versions of the VirtualGL server components.  However, not
all x86-64 Linux systems contain the 32-bit libraries necessary to build a
32-bit version of VirtualGL.  To build 32-bit VirtualGL components on an x86-64
Linux system, you will need, at minimum, the following 32-bit libraries:

-- glibc development libraries

   * Usually contained in the "glibc-devel" package (iX86)
   * Usually installed by default on x86-64 Linux systems
   * On Ubuntu, these are contained in the "libc6-dev-i386" and "ia32-libs"
     packages.

-- X11 dev. kit

   * Usually contained in the "XFree86-devel" or "xorg-x11-devel" package
     (iX86)
   * Not always installed by default but usually available on the installation
     discs
   * On Ubuntu, you may need to use getlibs
     (http://ubuntuforums.org/showthread.php?t=474790&highlight=getlibs) to
     install the 32-bit X11 dev. kit:
     > sudo getlibs -p libX11-dev
     > sudo getlibs -p libxext-dev
     > sudo getlibs -p libxau-dev
     > sudo getlibs -p libglu1-mesa-dev

If for some reason your preferred 64-bit Linux distribution does not contain
one or more of the necessary 32-bit prerequisites, then:

  (1) Complain to your distribution vendor.
  (2) All x86-64 distributions of Linux have a corresponding 32-bit-only
      distribution, usually released on a separate set of discs.  On those
      discs, you should be able to find the 32-bit versions of the X11 dev. kit
      and the GLIBC dev. kit to match the 64-bit versions that are already
      installed on your system. You may have to use "rpm --force" to force the
      install of the 32-bit development packages, since they might contain
      header files which conflict with the 64-bit development packages that
      are already installed.  On Debian-based systems, you will need to use
      "dpkg --force-architecture" to force the installation of i386 packages
      on an amd64 system.  See item (1) above.


*******************************************************************************
**     Prerequisites - Mac
*******************************************************************************

-- Xcode Tools
   * Available on the OS X install discs or from:
     http://developer.apple.com/tools/xcode
   * At minimum, you will need the following packages from Xcode:
     gcc v3 or above
     X11 SDK
     OpenGL SDK
     Mac OS X SDK

-- Open mediaLib Lite (Intel-based Macs only)

   The Open mediaLib Lite source tarball should have been supplied to you along
   with the VirtualGL source tarball.  Untar the Open mediaLib Lite source
   tarball into the directory one level up from the VirtualGL build directory,
   and refer to openmliblite/ReadMe.txt for instructions on how to build
   Open mediaLib Lite.

-- Quicktime and CoreAudio SDK's (PowerPC-based Macs only)


*******************************************************************************
**     Prerequisites - Solaris
*******************************************************************************

-- Solaris 8 or newer (Sparc) or Solaris/OpenSolaris 10 or newer (x86)

-- OpenSSL headers and link libraries (optional)

   VirtualGL can be built using the shared OpenSSL libraries provided with
   your Solaris distribution, but this produces a version of VirtualGL that may
   not be compatible with other versions of Solaris.  In order to build a fully
   cross-compatible version of VirtualGL, you must link VirtualGL against
   static versions of the OpenSSL libraries.  To do this:

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.solaris64" if you are
     building a 64-bit SPARC version of VirtualGL, "openssl.solaris" if you are
     building a 32-bit SPARC version of VirtualGL, "openssl.solx8664" if you
     are building a 64-bit x86 version of VirtualGL, or "openssl.solx86" if
     you are building a 32-bit x86 version of VirtualGL.
   * cd to the OpenSSL source directory and issue one of the following
     commands to configure the OpenSSL build:

     64-bit SPARC:
     ./Configure solaris64-sparcv9-cc shared

     32-bit SPARC:
     ./Configure solaris-sparcv8-cc shared

     64-bit x86:
     ./Configure solaris64-x86_64-cc shared

     32-bit x86:
     ./Configure solaris-x86-cc shared

     (If you plan to use GCC to build VirtualGL, replace "cc" with "gcc" in
     all of the above.)

   * Build OpenSSL:

     make

-- Sun Studio/Workshop Pro Compiler

   * Tested with v5.5 (Sparc) and with Sun Studio 10, 11, & 12 (Sparc and x86)
   * See http://www.sun.com/software/products/studio/ for a free download.

... or ...

-- GCC

   * Preferred version for SPARC:
     http://cooltools.sunsource.net/gcc/4.0.3/install.html
   * Also available from the Solaris 9 & 10 Companion CD's
     (http://www.sun.com/software/solaris/freeware/),
     Blastwave (http://www.blastwave.org), or SunFreeware
     (http://www.sunfreeware.com/)
   * Build VirtualGL using
       gmake CC=gcc

-- SOLARIS 8 ONLY:  Linker patch 109147-32 must be installed

   * See http://sunsolve.sun.com/pub-cgi/show.pl?target=patchpage

-- SPARC ONLY:  Sun OpenGL

   * Requires v1.3 or later (1.5 or later recommended)
   * See http://www.sun.com/software/graphics/opengl/
   * If your build system has Sun OpenGL v1.3, build VirtualGL using
       gmake USEGLP=no

-- GNU Make v3.7 or later

   * Available from the Solaris 9 & 10 Companion CD's
     (http://www.sun.com/software/solaris/freeware/),
     Blastwave (http://www.blastwave.org), or SunFreeware
     (http://www.sunfreeware.com/)

-- Sun mediaLib

   * mediaLib is pre-installed on Solaris 10 and later, and it can also be
     downloaded for free from http://www.sun.com/processors/vis/mlib.html.  If
     you are running Solaris 10/x86 Update 3 or older, then you should upgrade
     the pre-installed version of mediaLib on your system to mediaLib 2.5 in
     order to achieve the best possible performance.


*******************************************************************************
**     Prerequisites - Win32
*******************************************************************************

These prerequisites are for building a native Windows client.  For building
VirtualGL on Cygwin, see the next section.

-- GNU Make v3.7 or later

   GNU Make for Win32 can be found in MSYS
   (http://www.mingw.org/download.shtml) or Cygwin (http://www.cygwin.com/)

-- Microsoft Visual C++ 2003 or later

   * Tested with Microsoft Visual C++ 2005 Express Edition and
     Microsoft Visual C++ 2008 Express Edition (both free downloads):

     http://msdn.microsoft.com/vstudio/express/visualc/

   * Add the compiler binary directories (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\BIN;
     c:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE)
     to the system or user PATH environment variable prior to building
     VirtualGL.
   * Add the compiler include directory (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\INCLUDE)
     to the system or user INCLUDE environment variable prior to building
     VirtualGL.
   * Add the compiler library directory (for instance,
     c:\Program Files\Microsoft Visual Studio 9.0\VC\LIB)
     to the system or user LIB environment variable prior to building
     VirtualGL.

-- Microsoft Windows SDK

   * This is included with Microsoft Visual C++ 2008 Express Edition, but users
     of prior editions of Visual C++ can download the SDK from:

     http://msdn2.microsoft.com/en-us/windowsserver/bb980924.aspx

   * Add the SDK binary directory (for instance,
     c:\Program Files\Microsoft SDKs\Windows\v6.0A\bin)
     to the system or user PATH environment variable prior to building
     VirtualGL.
   * Add the SDK include directory (for instance,
     c:\Program Files\Microsoft SDKs\Windows\v6.0A\include)
     to the system or user INCLUDE environment variable prior to building
     VirtualGL.
   * Add the SDK library directory (for instance,
     c:\Program Files\Microsoft SDKs\Windows\v6.0A\lib)
     to the system or user LIB environment variable prior to building
     VirtualGL.

-- OpenSSL headers and link libraries (optional)

   * Download the latest OpenSSL source tarball from http://www.openssl.org
   * Extract the tarball into the directory one level up from your VirtualGL
     build directory
   * Rename the OpenSSL source directory to "openssl.windows".
   * Download the Win32 binaries of NASM from the "Download" section of
     http://sourceforge.net/projects/nasm/.  Place nasm.exe somewhere in your
     PATH.
   * cd to the OpenSSL source directory and issue the following
     commands to configure the OpenSSL build:

     perl Configure VC-WIN32
     ms\do_nasm.bat

   * Build OpenSSL:

     nmake -f ms\nt.mak

   * If you are building OpenSSL 0.9.8h or 0.9.8i and are using Visual C++ 2008
     or later, then comment out the following lines in
     openssl.windows\inc32\openssl\ossl_typ.h prior to building VirtualGL:

     typedef struct ocsp_req_ctx_st OCSP_REQ_CTX;
     typedef struct ocsp_response_st OCSP_RESPONSE;
     typedef struct ocsp_responder_id_st OCSP_RESPID;

     Hopefully this will be fixed in future releases of OpenSSL.

-- Hummingbird Exceed XDK v8 or later

   * Add the XDK include path (for instance,
     c:\Program Files\Hummingbird\Connectivity\13.00\Exceed\XDK\include)
     to the system or user INCLUDE environment variable prior to building
     VirtualGL.
   * Add the XDK library path (for instance,
     c:\Program Files\Hummingbird\Connectivity\13.00\Exceed\XDK\lib)
     to the system or user LIB environment variable prior to building
     VirtualGL.

-- Open mediaLib Lite

   The Open mediaLib Lite source tarball should have been supplied to you along
   with the VirtualGL source tarball.  Untar the Open mediaLib Lite source
   tarball into the directory one level up from the VirtualGL build directory,
   and refer to openmliblite/ReadMe.txt for instructions on how to build
   Open mediaLib Lite.


*******************************************************************************
**     Building VirtualGL on Cygwin
*******************************************************************************

You should be able to build and run the VirtualGL client on Cygwin, although
this configuration has not been thoroughly tested.  To build VirtualGL on
Cygwin:

-- Install the following Cygwin packages if they aren't already installed:
   gcc
   gcc-core
   gcc-g++
   make
   openssl-devel
   xorg-x11-devel

-- Open mediaLib Lite

   The Open mediaLib Lite source tarball should have been supplied to you along
   with the VirtualGL source tarball.  Untar the Open mediaLib Lite source
   tarball into the directory one level up from the VirtualGL build directory,
   and refer to openmliblite/ReadMe.txt for instructions on how to build
   Open mediaLib Lite.

-- Pass an argument of "platform=cygwin" to make when performing the
   build:

     make platform=cygwin

   The binaries will reside in "cygwin/bin" and "cygwin/lib".


*******************************************************************************
**     Building
*******************************************************************************

Assuming all of the above is set up correctly, you should be able to just type

  make

On Solaris, type

  gmake

instead.


*******************************************************************************
**     Makefile Options
*******************************************************************************

Each of these options can be passed as an argument to "make" or "gmake".  You
can also create a file called "config" in the root of the VirtualGL build
directory and add Makefile options to that file so as to avoid having to type
them every time you build VirtualGL.

DEBUG = yes

  * Build a version of VirtualGL with debugging symbols and no optimization.
    The debug version will reside in "${platform}/dbg/lib" and
    "${platform}/dbg/bin", whereas the release version will reside in
    "${platform}/lib" and "${platform}/bin", so these two versions can be built
    independently of one another.

JPEGLIB = libjpeg

  * The default build of VirtualGL links against Sun mediaLib on Solaris and
    Open mediaLib on Linux, Windows, and OS X.  mediaLib provides a variety of
    image processing primitives which are accelerated by the vector multimedia
    instructions available in SPARC and x86 CPUs.  These image processing
    primitives enable VirtualGL to compress full-screen images at interactive
    frame rates.  However, if building VirtualGL for a CPU other than SPARC or
    x86, it is necessary to build it without mediaLib support.  Specifying this
    Makefile option will build an (included) version of libjpeg and link
    VirtualGL against it rather than the accelerated mediaLib codecs mentioned
    above.  The use of libjpeg produces correct, albeit slow, behavior.  The
    version of libjpeg included in the VirtualGL build resides in the
    "jpeg/jpeg-6b" directory and differs from the IJG release
    (see http://www.ijg.org) only in its support of little endian and 32-bit
    pixel formats (both of which are necessary to allow the VirtualGL client to
    decompress directly into X11 shared memory.)

M32 = yes

  * On x86-64 systems, this cross-compiles a 32-bit (x86) version of VirtualGL.

CC = gcc

  * On Solaris, this builds VirtualGL using the GCC compiler rather than the
    default (Sun Studio) compiler.  gcc and g++ should be in your PATH.

USEGLP = no

  * On Solaris, this builds VirtualGL without GLP extension code.  This is 
    necessary to build VirtualGL on versions of Sun OpenGL prior to 1.5.

USESSL = no

  * Build VirtualGL without SSL support.


*******************************************************************************
**     Installing / Distributing
*******************************************************************************

On Unix systems, you can type

  make install [prefix={install prefix}]

"prefix" defaults to "/usr/local" but can be changed to something else (such
as "/usr") if you prefer.  Executables will be installed to "$prefix/bin", and
libraries will be installed to "$prefix/lib" (or "$prefix/lib/64" or
"$prefix/lib64", as appropriate.)

To build a redistributable package, type

  make dist

  * On Linux, this requires RPM v4 or later.
  * On Solaris, this requires pkgmk, pkgtrans, and bzip2.
  * On Windows, this requires the Nullsoft Install System
    (http://nsis.sourceforge.net/.)  makensis.exe should be in your PATH.
  * On OS X, this requires the PackageMaker application, which must be
    installed in /Developer/Applications/Utilities.

To build a redistributable DEB package (Debian-compatible systems), type

  make deb
