APPNAME = VirtualGL

OS := $(shell uname -s)
ARCH := $(shell uname -m)

platform := windows
subplatform :=
ifeq ($(OS), Linux)
 platform := linux
 ifeq ($(ARCH), ia64)
  subplatform := ia64
 endif
 ifeq ($(ARCH), x86_64)
  subplatform := 64
 endif
endif
ifeq ($(OS), FreeBSD)
 platform := freebsd
 ifeq ($(ARCH), amd64)
  subplatform := 64
 endif
endif
ifeq ($(OS), IRIX64)
 platform := irix
 subplatform := 64
endif
ifeq ($(OS), SunOS)
 ifeq ($(ARCH), i86pc)
  platform := solx86
  subplatform := 64
 else
  platform := solaris
  subplatform := 64
 endif
endif
ifeq ($(OS), Darwin)
 ifeq ($(ARCH), i386)
  platform := osxx86
 else
  platform := osx
 endif
endif

ifeq ($(TOPDIR),)
 TOPDIR = ..
endif

_DUMMY0 := $(shell if [ ! -f $(TOPDIR)/config ]; then touch $(TOPDIR)/config; fi)
include $(TOPDIR)/config

ifeq ($(M32), yes)
 subplatform :=
endif

_DUMMY1 := $(shell if [ ! -f $(TOPDIR)/config.$(platform)$(subplatform) ]; then touch $(TOPDIR)/config.$(platform)$(subplatform); fi)
include $(TOPDIR)/config.$(platform)$(subplatform)

# Macros which are common to all Unix platforms
VERSION := 2.2.80
BUILD := $(shell date +%Y%m%d)
ifeq ($(DEBUG), yes)
 BUILD := $(BUILD)d
endif

ifneq ($(DISTRO),)
 BLDDIR = $(TOPDIR)/$(platform)$(subplatform)/$(DISTRO)
 BLDDIR32 = $(TOPDIR)/$(platform)/$(DISTRO)
else
 BLDDIR = $(TOPDIR)/$(platform)$(subplatform)
 BLDDIR32 = $(TOPDIR)/$(platform)
endif

ifeq ($(DEBUG), yes)
 BLDDIR := $(BLDDIR)/dbg
 BLDDIR32 := $(BLDDIR32)/dbg
endif

ENAME = bin
LNAME = lib
ifeq ($(ONAME),)
 ONAME := obj
endif

EDIR := $(BLDDIR)/$(ENAME)
EDIR32 := $(BLDDIR32)/$(ENAME)
LDIR := $(BLDDIR)/$(LNAME)
LDIR32 := $(BLDDIR32)/$(LNAME)
ODIR := $(BLDDIR)/$(ONAME)
ODIR32 := $(BLDDIR32)/$(ONAME)

_DUMMY := $(shell mkdir -p $(EDIR))
_DUMMY2 := $(shell mkdir -p $(LDIR))
_DUMMY3 := $(shell mkdir -p $(ODIR))

RM = rm -f
INSTALL = install

# System-specific macros
include $(TOPDIR)/Makerules.$(platform)

CINCLUDES := $(CINCLUDES) -I$(TOPDIR)/$(platform)/include -I$(TOPDIR)/include -I.
CDEFINES := $(CDEFINES) -D__VERSION=\"$(VERSION)\" -D__BUILD=\"$(BUILD)\" -D__APPNAME=\"$(APPNAME)\"
ifeq ($(DEBUG), yes)
 CDEFINES := $(CDEFINES) -D__DEBUG__
endif
ifeq ($(USEXV), yes)
 CDEFINES := $(CDEFINES) -DUSEXV
endif
ifeq ($(CXXFLAGS),)
 CXXFLAGS := $(CFLAGS)
endif
CFLAGS := $(CFLAGS) $(OPTFLAG) $(ARCHFLAG) $(CDEFINES) $(CINCLUDES)
CXXFLAGS := $(CXXFLAGS) $(OPTFLAG) $(ARCHFLAG) $(CDEFINES) $(CINCLUDES)
ifeq ($(platform), windows)
 LDFLAGS := -LIBPATH:$(LDIR) $(LDFLAGS)
else
 LDFLAGS := $(OPTFLAG) $(ARCHFLAG) -L$(LDIR) $(LDFLAGS)
endif

ifeq ($(JPEGLIB),)
 JPEGLIB = $(DEFAULTJPEGLIB)
endif

ifeq ($(JPEGLIB), libjpeg-turbo)
 ifeq ($(platform), osxx86)
  JPEG_LDFLAGS=/opt/libjpeg-turbo/lib/libturbojpeg.a
 else
  ifeq ($(platform), osx)
   JPEG_LDFLAGS=/opt/libjpeg-turbo/lib/libturbojpeg.a
  else
   ifeq ($(platform), windows)
    JPEG_LDFLAGS=turbojpeg-static.lib
   else
    ifeq ($(subplatform), 64)
     JPEG_LDFLAGS=-L/opt/libjpeg-turbo/lib64 -L/opt/libjpeg-turbo/lib -Wl,-Bstatic -lturbojpeg -Wl,-Bdynamic
    else
     JPEG_LDFLAGS=-L/opt/libjpeg-turbo/lib32 -L/opt/libjpeg-turbo/lib -Wl,-Bstatic -lturbojpeg -Wl,-Bdynamic
    endif
   endif
  endif
 endif
endif

ifeq ($(JPEGLIB), ipp)
 ifeq ($(platform), windows)
  JPEG_LDFLAGS=turbojpeg.lib
 else
  JPEG_LDFLAGS=-lturbojpeg
 endif
 CFLAGS := $(CFLAGS) -DUSEIPP
 CXXFLAGS := $(CXXFLAGS) -DUSEIPP
endif

ifeq ($(JPEGLIB), medialib)
 CFLAGS := $(CFLAGS) -DUSEMEDIALIB
 CXXFLAGS := $(CXXFLAGS) -DUSEMEDIALIB
 FAKERLINK := $(FAKERLINK) -lmlib
endif


# Implicit rules
$(ODIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(CC) $(CFLAGS) $(DEPFLAG) $< > $(ODIR)/$*.d
	@mv -f $(ODIR)/$*.d $(ODIR)/$*.d.tmp
	@sed -e 's|.*:|$(ODIR)\/$*.o:|' < $(ODIR)/$*.d.tmp > $(ODIR)/$*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $(ODIR)/$*.d.tmp | fmt -1 | \
	  sed -e 's/^ *//' -e 's/$$/:/' >> $(ODIR)/$*.d
	@rm -f $(ODIR)/$*.d.tmp

$(ODIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@
	$(CXX) $(CXXFLAGS) $(DEPFLAG) $< > $(ODIR)/$*.d
	@mv -f $(ODIR)/$*.d $(ODIR)/$*.d.tmp
	@sed -e 's|.*:|$(ODIR)\/$*.o:|' < $(ODIR)/$*.d.tmp > $(ODIR)/$*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $(ODIR)/$*.d.tmp | fmt -1 | \
	  sed -e 's/^ *//' -e 's/$$/:/' >> $(ODIR)/$*.d
	@rm -f $(ODIR)/$*.d.tmp

$(ODIR)/%.o: %.cxx
	$(CXX) $(CXXFLAGS) -c $< -o $@
	$(CXX) $(CXXFLAGS) $(DEPFLAG) $< > $(ODIR)/$*.d
	@mv -f $(ODIR)/$*.d $(ODIR)/$*.d.tmp
	@sed -e 's|.*:|$(ODIR)\/$*.o:|' < $(ODIR)/$*.d.tmp > $(ODIR)/$*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $(ODIR)/$*.d.tmp | fmt -1 | \
	  sed -e 's/^ *//' -e 's/$$/:/' >> $(ODIR)/$*.d
	@rm -f $(ODIR)/$*.d.tmp

$(ODIR)/%.E: %.c
	@rm -f $@
	$(CC) $(CFLAGS) -E $< > $@

$(ODIR)/%.E: %.cpp
	@rm -f $@
	$(CXX) $(CXXFLAGS) -E $< > $@ 

$(ODIR)/%.E: %.cxx
	@rm -f $@
	$(CXX) $(CXXFLAGS) -E $< > $@ 

$(LDIR)/lib%.a: $(ODIR)/%.o
	$(AR) $@ $<

$(ODIR)/%.obj: %.c
	$(CC) $(CFLAGS) -c $< -Fo$@

$(ODIR)/%.obj: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -Fo$@

$(ODIR)/%.obj: %.cxx
	$(CXX) $(CXXFLAGS) -c $< -Fo$@

$(LDIR)/%.lib: $(ODIR)/%.obj
	$(AR) -out:$@ $<

# This assures that the "clean" command runs even if there is a file called
# "clean" in the current directory
.PHONY : clean

include $(TOPDIR)/config
include $(TOPDIR)/config.$(platform)$(subplatform)
