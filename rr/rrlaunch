#!/bin/sh
# The interpreter to use (if this script is submitted to N1 Grid Engine):
#$ -S /bin/sh
#
# This allocates a graphics device and passes it in the VGL_DISPLAY
# environment:
#$ -l gfx=1
#
# Specify other environment variables that N1GE should pass to this script:
#$ -v DISPLAY
#$ -v VGL_CLIENT
#$ -v VGL_COMPRESS
#$ -v VGL_PORT
#$ -v VGL_SSL
#$ -v VGL_GLLIB
#$ -v VGL_X11LIB
#$ -v VGL_GAMMA
#$ -v VGL_PROGRESSIVE
#$ -v VGL_NPROCS

usage()
{
	echo
	echo "Usage: `basename $0` [options] [--] <OpenGL app> [OpenGL app arguments]"
	echo
	echo "VirtualGL display options (* = Direct Mode only)"
	echo "  -c <c>    : 0 = Draw 3D images uncompressed using X11 (Raw Mode)"
  echo "            : 1 = Compress 3D images as JPEG/send to vglclient (Direct Mode)"
	echo "  -cl <d>   : <d> = the X Display where the app's windows will end up *"
	echo "  -dl       : Force apps that dlopen() libGL to load VirtualGL instead"
	echo "  -d <d>    : <d> = the X Display or GLP device to use for 3D rendering"
	echo "  -fps <f>  : Limit client/server frame rate to <f> frames/sec"
	echo "  +/-g      : Enable/disable gamma correction"
	echo "  -gamma <g>: Specify gamma correction factor (see docs)"
	echo "  -np <n>   : Number of CPUs to use for performing image compression *"
	echo "  -p <p>    : TCP port to use when connecting to vglclient *"
	echo "  +/-pr     : Enable/disable performance profiling output"
	echo "  -q <q>    : JPEG compression quality [1-100] *"
	echo "  +/-s      : Enable/disable SSL encryption of compressed image stream *"
	echo "  -samp <s> : JPEG chrominance subsampling (444, 422, 411) *"
	echo "  +/-sp     : Turn on/off frame spoiling"
	echo "  -st <s>   : 0 = Turn off stereo rendering"
	echo "            : rc = Use red/cyan (anaglyphic) stereo, even if quad-buffered is available"
	echo "  +/-sync   : Enable/disable strict 2D/3D synchronization"
	echo "  +/-tr     : Enable/disable function call tracing (generates a lot of output)"
	echo "  +/-v      : Enable/disable verbose VirtualGL messages"
	echo "  -64       : (Solaris only) Preload VirtualGL only into 64-bit apps"
	echo "  -32       : (Solaris only) Preload VirtualGL only into 32-bit apps"
	exit $1
}

GEOPROBE_USEGLX=1
export GEOPROBE_USEGLX
PROMAGIC_USEGLX=1
export PROMAGIC_USEGLX

if [ "$OPENGL_DEVICE" != "" ]; then
	echo [VGL] WARNING: The OPENGL_DEVICE environment variable is incompatible
	echo [VGL] with	VirtualGL.  Temporarily unsetting this environment variable.
fi
unset OPENGL_DEVICE
export OPENGL_DEVICE

__VGL_DL=0
__VGL_64=0
__VGL_32=0

while [ $# -gt 0 ]
do
	case "$1" in
	+sy*)       VGL_SYNC=1        ; export VGL_SYNC     ;;
	-sy*)       VGL_SYNC=0        ; export VGL_SYNC     ;;
	-st*)       VGL_STEREO=$2     ; export VGL_STEREO   ; shift     ;;
	+sp*)       VGL_SPOIL=1       ; export VGL_SPOIL    ;;
	-sp*)       VGL_SPOIL=0       ; export VGL_SPOIL    ;;
	-sa*)       VGL_SUBSAMP=$2    ; export VGL_SUBSAMP  ; shift     ;;
	-s*)        VGL_SSL=0         ; export VGL_SSL      ;;
	+s*)        VGL_SSL=1         ; export VGL_SSL      ;;
	-prog*)     VGL_PROGRESSIVE=0 ; export VGL_PROGRESSIVE  ;;
	+prog*)     VGL_PROGRESSIVE=1 ; export VGL_PROGRESSIVE  ;;
	-pr*)       VGL_PROFILE=0     ; export VGL_PROFILE  ;;
	+pr*)       VGL_PROFILE=1     ; export VGL_PROFILE  ;;
	-q*)        VGL_QUAL=$2       ; export VGL_QUAL     ; shift     ;;
	+de*)       VGL_DEBUG=1       ; export VGL_DEBUG    ;;
	-de*)       VGL_DEBUG=0       ; export VGL_DEBUG    ;;
	-dl)        __VGL_DL=1        ;;
	+tr*)       VGL_TRACE=1       ; export VGL_TRACE    ;;
	-tr*)       VGL_TRACE=0       ; export VGL_TRACE    ;;
	-d*)        VGL_DISPLAY=$2    ; export VGL_DISPLAY  ; shift     ;;
	-cl*)       VGL_CLIENT=$2     ; export VGL_CLIENT   ; shift     ;;
	-p*)        VGL_PORT=$2       ; export VGL_PORT     ; shift     ;;
	-c*)        VGL_COMPRESS=$2   ; export VGL_COMPRESS ; shift     ;;
	-np*)       VGL_NPROCS=$2     ; export VGL_NPROCS   ; shift     ;;
	-gamma)     VGL_GAMMA=$2      ; export VGL_GAMMA    ; shift     ;;
	-g*)        VGL_GAMMA=0       ; export VGL_GAMMA    ;;
	+g*)        VGL_GAMMA=1       ; export VGL_GAMMA    ;;
	-v*)        VGL_VERBOSE=0     ; export VGL_VERBOSE  ;;
	+v*)        VGL_VERBOSE=1     ; export VGL_VERBOSE  ;;
	-fps)       VGL_FPS=$2        ; export VGL_FPS      ; shift     ;;
	-ld)        LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH ;
	            export LD_LIBRARY_PATH              ; shift     ;;
	-64)        __VGL_64=1; __VGL_32=0        ;;
	-32)        __VGL_32=1; __VGL_64=0        ;;
	-h)         usage 0 ;;
	--help)     usage 0 ;;
	--)         shift   ; break ;;
	-*)         usage 1 ;;
	*)          break   ;;
	esac
	shift
done
if [ $# -eq 0 ]
then
	usage 0
fi

if [ -r /etc/opt/VirtualGL/vgl_xauth_key ]; then
	XAUTH=xauth
	if [ -x /usr/X11R6/bin/xauth ]; then
		XAUTH=/usr/X11R6/bin/xauth
	fi
	if [ -x /usr/openwin/bin/xauth ]; then
		XAUTH=/usr/openwin/bin/xauth
	fi
	$XAUTH merge /etc/opt/VirtualGL/vgl_xauth_key
fi

case `uname -s` in

SunOS)

if [ -z "$FAKERLIB" ]; then
FAKERLIB=librrfaker.so
if [ -f /opt/SUNWvgl/lib/64/librrfaker.so ]
then
	FAKERLIB=/opt/SUNWvgl/lib/64/librrfaker.so
fi
fi
export FAKERLIB
if [ -z "$FAKERLIB32" ]; then
FAKERLIB32=librrfaker.so
if [ -f /opt/SUNWvgl/lib/librrfaker.so ]
then
	FAKERLIB32=/opt/SUNWvgl/lib/librrfaker.so
fi
fi
export FAKERLIB32
if [ $__VGL_64 -eq 0 ]; then
	if [ -z "$LD_PRELOAD_32" ]; then
		LD_PRELOAD_32=$FAKERLIB32
	else
		LD_PRELOAD_32=$FAKERLIB32:$LD_PRELOAD_32
	fi
	if [ $__VGL_DL -eq 1 ]; then
		if [ -f /opt/SUNWvgl/lib/libdlfaker.so ]
		then
			LD_PRELOAD_32=/opt/SUNWvgl/lib/libdlfaker.so:$LD_PRELOAD_32
		else
			LD_PRELOAD_32=libdlfaker.so:$LD_PRELOAD_32
		fi
	fi
	export LD_PRELOAD_32
fi
if [ $__VGL_32 -eq 0 ]; then
	if [ -z "$LD_PRELOAD_64" ]; then
		LD_PRELOAD_64=$FAKERLIB
	else
		LD_PRELOAD_64=$FAKERLIB:$LD_PRELOAD_64
	fi
	if [ $__VGL_DL -eq 1 ]; then
		if [ -f /opt/SUNWvgl/lib/64/libdlfaker.so ]
		then
			LD_PRELOAD_64=/opt/SUNWvgl/lib/64/libdlfaker.so:$LD_PRELOAD_64
		else
			LD_PRELOAD_64=libdlfaker.so:$LD_PRELOAD_64
		fi
	fi
	export LD_PRELOAD_64
fi
exec ${1+"$@"}

;;

*)

if [ -z "$LD_PRELOAD" ]; then
	LD_PRELOAD=librrfaker.so
else
	LD_PRELOAD=librrfaker.so:$LD_PRELOAD
fi
if [ $__VGL_DL -eq 1 ]; then
	LD_PRELOAD=libdlfaker.so:$LD_PRELOAD
fi
export LD_PRELOAD
exec ${1+"$@"}

;;

esac
